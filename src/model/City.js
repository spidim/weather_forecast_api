/*
 * Weather Forecast API
 * This is the swagger definition of the weather forecast API. For more info contact sdimopoulos@irisweb.gr
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sdimopoulos@irisweb.gr
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CityCoords', 'model/ForecastInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CityCoords'), require('./ForecastInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.WeatherForecastApi) {
      root.WeatherForecastApi = {};
    }
    root.WeatherForecastApi.City = factory(root.WeatherForecastApi.ApiClient, root.WeatherForecastApi.CityCoords, root.WeatherForecastApi.ForecastInfo);
  }
}(this, function(ApiClient, CityCoords, ForecastInfo) {
  'use strict';

  /**
   * The City model module.
   * @module model/City
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>City</code>.
   * @alias module:model/City
   * @class
   * @param coords {module:model/CityCoords} 
   * @param name {String} 
   * @param currWeatherIconId {String} 
   */
  var exports = function(coords, name, currWeatherIconId) {
    this.coords = coords;
    this.name = name;
    this.currWeatherIconId = currWeatherIconId;
  };

  /**
   * Constructs a <code>City</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/City} obj Optional instance to populate.
   * @return {module:model/City} The populated <code>City</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('coords'))
        obj.coords = CityCoords.constructFromObject(data['coords']);
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('currWeatherIconId'))
        obj.currWeatherIconId = ApiClient.convertToType(data['currWeatherIconId'], 'String');
      if (data.hasOwnProperty('forecastInfo'))
        obj.forecastInfo = ForecastInfo.constructFromObject(data['forecastInfo']);
    }
    return obj;
  }

  /**
   * @member {Number} id
   */
  exports.prototype.id = undefined;

  /**
   * @member {module:model/CityCoords} coords
   */
  exports.prototype.coords = undefined;

  /**
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * @member {String} currWeatherIconId
   */
  exports.prototype.currWeatherIconId = undefined;

  /**
   * @member {module:model/ForecastInfo} forecastInfo
   */
  exports.prototype.forecastInfo = undefined;

  return exports;

}));
