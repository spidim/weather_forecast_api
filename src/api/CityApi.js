/*
 * Weather Forecast API
 * This is the swagger definition of the weather forecast API. For more info contact sdimopoulos@irisweb.gr
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sdimopoulos@irisweb.gr
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/City'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/City'));
  } else {
    // Browser globals (root is window)
    if (!root.WeatherForecastApi) {
      root.WeatherForecastApi = {};
    }
    root.WeatherForecastApi.CityApi = factory(root.WeatherForecastApi.ApiClient, root.WeatherForecastApi.City);
  }
}(this, function(ApiClient, City) {
  'use strict';

  /**
   * City service.
   * @module api/CityApi
   * @version 1.0.0
   */

  /**
   * Constructs a new CityApi. 
   * @alias module:api/CityApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAllCityInfo operation.
     * @callback module:api/CityApi~getAllCityInfoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/City>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all cities
     * Returns all available city forecasts
     * @param {module:api/CityApi~getAllCityInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/City>}
     */
    this.getAllCityInfo = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [City];

      return this.apiClient.callApi(
        '/city', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCityInfo operation.
     * @callback module:api/CityApi~getCityInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/City} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find city by ID
     * Returns a city's weather info
     * @param {Number} cityId ID of city to return
     * @param {module:api/CityApi~getCityInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/City}
     */
    this.getCityInfo = function(cityId, callback) {
      var postBody = null;

      // verify the required parameter 'cityId' is set
      if (cityId === undefined || cityId === null) {
        throw new Error("Missing the required parameter 'cityId' when calling getCityInfo");
      }


      var pathParams = {
        'cityId': cityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = City;

      return this.apiClient.callApi(
        '/city/{cityId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
