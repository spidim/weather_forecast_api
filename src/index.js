/*
 * Weather Forecast API
 * This is the swagger definition of the weather forecast API. For more info contact sdimopoulos@irisweb.gr
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sdimopoulos@irisweb.gr
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/City', 'model/CityCoords', 'model/ForecastInfo', 'model/ForecastInfoHumidity', 'model/ForecastInfoPressure', 'model/ForecastInfoTemperature', 'api/CityApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/ApiResponse'), require('./model/City'), require('./model/CityCoords'), require('./model/ForecastInfo'), require('./model/ForecastInfoHumidity'), require('./model/ForecastInfoPressure'), require('./model/ForecastInfoTemperature'), require('./api/CityApi'));
  }
}(function(ApiClient, ApiResponse, City, CityCoords, ForecastInfo, ForecastInfoHumidity, ForecastInfoPressure, ForecastInfoTemperature, CityApi) {
  'use strict';

  /**
   * This_is_the_swagger_definition_of_the_weather_forecast_API__For_more_info_contact_sdimopoulosirisweb_gr.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var WeatherForecastApi = require('index'); // See note below*.
   * var xxxSvc = new WeatherForecastApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new WeatherForecastApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new WeatherForecastApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new WeatherForecastApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The ApiResponse model constructor.
     * @property {module:model/ApiResponse}
     */
    ApiResponse: ApiResponse,
    /**
     * The City model constructor.
     * @property {module:model/City}
     */
    City: City,
    /**
     * The CityCoords model constructor.
     * @property {module:model/CityCoords}
     */
    CityCoords: CityCoords,
    /**
     * The ForecastInfo model constructor.
     * @property {module:model/ForecastInfo}
     */
    ForecastInfo: ForecastInfo,
    /**
     * The ForecastInfoHumidity model constructor.
     * @property {module:model/ForecastInfoHumidity}
     */
    ForecastInfoHumidity: ForecastInfoHumidity,
    /**
     * The ForecastInfoPressure model constructor.
     * @property {module:model/ForecastInfoPressure}
     */
    ForecastInfoPressure: ForecastInfoPressure,
    /**
     * The ForecastInfoTemperature model constructor.
     * @property {module:model/ForecastInfoTemperature}
     */
    ForecastInfoTemperature: ForecastInfoTemperature,
    /**
     * The CityApi service constructor.
     * @property {module:api/CityApi}
     */
    CityApi: CityApi
  };

  return exports;
}));
